// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE.md file.

// Code generated by staticfs_gen.go with go1.8. DO NOT EDIT.

package main

import (
	"compress/gzip"
	"encoding/base64"
	"encoding/gob"
	"strings"
)

// staticFS is a mapping from file paths without the leading slash
// to the contents of the file (e.g. css/playground.css => data).
var staticFS = func() (m map[string][]byte) {
	r := strings.NewReader("H4sIAAAAAAAC/+x7C3hUxdn/i9r+LaVWrFWrRQ+rXITdk5k5tzkhieL1TwtJgESq6EM3uyfJ0d09m93NzVZF/7UX/2pBrVK/Wq22/Wo/2waR9mu1fqA+Fq1tBNEqIoKACl4IykWK7Ps9M2d3s5tsBLz0aUvO88yzZ2bey1zeeef3zpw9Cq8+YsRheA2MGDViJED2orvwGjji8268paI53OFGvITqRrzsib8GGAGHw9FHi98jofVTACYAKIrIK/CLowF+/CnI1SvQegTAeccBTASAowUd+Hwf9Bx9zHFw7HFfguNO+DKccOLJMOaUUyGkqkAZgwtqDfhavQUXzeJw8WwbLmmshK/PmQJf/1oVROfWQFtrLSy9+yJYfJcDT/02AqsfcqD3wRS8uLwZXnqsGV5+vBXWPR6Dvz2Whg0rWmHTky68+tRlsOWvMdj6dBzeWhWHbas96Fvtwea/dsG257ph+7NJ2PlCG+xZm4a96zLwzporYN+GDshu6IbsK1dA4to/QNt3H4abFnwHfnDTdXDbrTfAz356A/zk7ttg2YP3wvYXvwd7N8yH7KZvQXbzdZB99QbIvrYQsq/dAvteWwTZLXfA62t+Be9s/CW899ovIbttKWS3/QH2vPUI4Pbl0PfmGuh7cx3gzpWwafNmePON12HH9s2Ae16BXbt2wZ49eyCbzQIiyvE7rALgiHqATycBjlwAMLIH4LO9AEf1ASh4DFQjhbk4E7qxDRbhQliKi2E1rizwH1sBEKgHIEmA6gUA03sALuwFaOkD6MLRcB1S+BHOhF9jGyzDhbAKF8OmIv7xFQBn1gNclATILAC4sQfg3l6AR/oAVuJoeB4prMOZsBHbYAsuhG24GHYV8VeMB6ifCpCcC7AgA9BzI0DvvQB9jwLgqtGAz1PAl2YCbmoD3LoQsG8x4K4i/mMB6gMASQKwoAagZwZA71yAPhcAu0cDXkcB75gJ+Js2wOULAVctBtxcxH84QP0RAMlPAyz4DEDPSIDeUQB9RwGgcgxgDQW8eCbg5W2Aty0E/O1iwNVF/HAU1MPxkISxsAAmQw+Y0AtnQh9MAxx9ESBNAs78NmDbjwAX3g+4eAXgypeL+BWoBxOSMB0WQBP0QBf0wo3QBz8FHL0EkD4MOPNPgG0rAReuBVy8GXBlX4E/CBXwVagHF5LwHVgAP4MeeAx6YQP0Qd9ohHcowo6ZCLvaEHYvRNizGGHvSizwnwQVEIJ6OAOSMAsWQAR6oAN64bvQBz8cjfBzivDATIRH2hB6FyKsXYzwRhH/kbkR+CIk4SRYAGOhB8ZDLwShD2pGI3yNIrTNRLi+DeHnCxH+ZzHCmjz/qPHjximnnDzmyyedcPxxR4p8vuDLJxz/GYBRE2WBcvKYMSedIPMTxo8fF/ApRgJ8btLECRPGjwuMPeWUMSI/atKkSRMmjBkzbqxy8pjPAoyaPGnSJHXG9JAokPnJlq2pKjt9nKKMAhgVPKuu7txP/5/zpn/FGCvyvK7u8MPOOHvGiBH6uM8BjJpSV3fEp2rOrx0xgsq8+dW6GdPs6tra/3vmcUfBqBNPtaaeUzl5cuXUqgnHfuGoUV885ujTgsHg5MmTv/T50aOPglGjYFTuEe8Dn/kjDi7lH2GnYvgm5nzsmeD73/09DbUcRcpu6PhEU17PsP5h/cP6h/UP6//X1L9muYOP91ws08uPt/7D9b+64S+4932U6ZU1D/3D9L+3No2vPnUZbu/bWtC/ZfPfcNOTl8q6T1L/3nXteO/tX8dbbv4m3nLn7/D2ny/H//jPR/DmH/XgrTdfjj13zvtE9b+3ths7bliGmesfLZu++f3ffbz6X/kGZt9ejLj7BcQ9GxF39uJd9y6VumY3XYuaPQ2Nqul44aULZFnPA/cjvvMo4rtPYPbt32B241UfXv+mbyH+/XUc+GQR8akn/4inKKcW0oSJk/CldX8bRIv7dmD29UUfSj++tw4/6Lnrtg6cfr6OM79q4JJf3T404b7dmN107YHof1eUv7c2g9nXfzBIzK5du3BeOIITJ6n4jSuuwuzebZjd0InZ1xYOol29+lk8c+o5SJmJSx5Yirh9ec5+Mnn975bRv0bUvfG0h9m3lwySedui23H0F44vpOWPPIrZzd/27WPAUz+zoUB3ythx+P7Ol6T+rU97Uv/sWv7CQP2NddZvRN2TSyOY3fbAIJm33rqoRP+yZcsxu/k7ZfXX1c8u0J2snIZ7d6yV+p9Y0pTv/+LSvtuNc2bZOxZcXYuvPBHD7Ou3DZK5c+dOnHvxPBw3fhJ2dHZjdu/23PjfPIh25apVOKX6TAyqFHt6xJp4ROp/flkrdsXPFfrfa6izW6Tu6fbZc+rt7KoHm/GtVUl8/+UO3Lde2N/6D7Q/MUcFWxXrc0j7e8+fpxzt7hfTePfCBjkOjXV8TmMtf/Cajmn47vNpvOOG2XjHjbNw15o07tso1t/W8jJ3/Nnve35dbby6fHv37cLsltsxu74Dn3u4BRd9byYuvvNC3PlC2tdfy59uqOPrL2s6E/++LoN7XmovzNNN/68Wd77Y7dvC7pcQ92xG3LkKs1vvGsK3dWL2jXsQ3/0T4o6n/PHZOF/q+snCBtzSm5B9F2P84qNu3g52NtZay8X7lanz8f675uL1V84orNHWeWfgsvvm4R6xJg9ynxdrTfC2zDtDyrqkcQrec1Mj/vKHc9C5pMZfBzP4c2L+G2r5+3mdhVTHN+bf582Zgjd9qw4f+MlcXP3HFnztL3Hc/lybHDORxLsoE3WCRtAKnjx/Y629dpD8Wp4V8y9tsM6sbqizf99Qy9c11vInG2u5CwCHzZ5hXzi7lr9chveA0uxavnb2DH6BCIEbavnchlr+aE7esoYZfBocwNPY2Hj4rFprakMdv6mhjj8k2thQy9/Opbyu7bn8Rp/G+r7o0/z5cBj8kz/LAA7/pNJ8gBHldIpyBJBLtPQ8WNnvGcXOF9pw+7NJmd5aFcetT8dxy19jEpNtetLFDStaJR596bFmfHF5c8lel+ffnwyR8jIG8u9dlykrQ6S8DJHy7SjHv2dtukRG32pvyHYM5N8ncaAvIy8n345tqz0pQ6S8jIH8wjfsT0ZxX8rxD5Sx/pl7cP0zd5aVMRR/XsbjSxP4+FPP42NPrMIVv40PklGevxOzW+7AfVt/gVfd/DDOjf0AL/EW4bW3PojZLT/G3WsvL8goy79zVWGLeGf72/iV86twVv35uGvXztzm9j5mt94tZQzk373+ugLvVfOvQaqZ+Pb6/8Lsjqdl2YoVT+Bp4yfhkl//WPr7PH9Drf1F8b712W8X+K+4cj5WEB3fXn9fgf9PK1Zg4LQJeP+v7pA+1ffF9oni95mHWnCjwAc7n+nf495/x8d3Aoft213U/ntwzSMu9v4+WvCHK5Y04b2L5uCCa+rwrRd/iNk3fyH3qOJ9NLv1Tnzruavxlmvr8L9/ejEuvXuuzz/DmpeXU1M56fsX1PPd1185Hf+8NIIr/+DIJN5F2QX1fNcZlZOuL/KPrQPX8uyZ541tqOOC5v6GWv5gQ630rUsaaq3/f2nLSacMPg+9b+qBJoDS1Pf5+6aWXGClO1qyNaTqjK54TOlwUmnXS1QHqEoCipOIeFE30VIdaGw4L8QDSjoTTkTDMS/hVAcSXuCMmpFVY0Mh5eyUE844UaXTzbQq0xKXpSPhpKNMbM1kkpUVFZ2dnaqbK1S9VEvF6UooVDNyZFW6o2Wkoihd8VgiXRmNVAdyDMn2VEwSRiMVTsyJO4lMuoKqtCLQTx7pJ48I7W6HE/HicS+RlpyJ9KlFxKloc4FatKZTk0TUtu0KwioYC6WizaF0dyIT7gqVsqY7WsqxMkJIRbqjpZ/ywKgq017UTXpRt0CeL1DTXnsq4jR7qRZHTTiZinMazilUhogazUSLxOTHs0RrySAnwnEnnQxHnHRFvlzyd7rRTGt1QGMy1+q4La2ZQrbDdTrP8rqqA0QhisYUjalEPFTWutHqQLqjRdep6VP3G0uOIKeoslBDVJsqKapZzJAU+Q5VRr2IaGF1oMgKAzUjFaUq6jSnBamvT+R0nfKAUiFrCwIEd1S0t5+2KZz2+6goyXCLE/FiXqo6cGqzfHIVTV4q6qTyVaZ8Sqq8ZDjiZrr9FZCTne+WkFqoJ+Xr063hqNdZHWADKy/3vHh1gDFVH1gT6aoOMEulBtMNe1ClaApRdYPpdGBd1Iu0i9URak+4mXR1INk1iLs9lRIEsXC3k6oOyJ+8mHSr19mSEgOXSbXnB25ISelEOBlqahLGUUQ+uDrkRFucUNyNJj03IUQ1h2PpQeSSMuFFnXSJONmkdlcWl+XrdBNRrzOUM2JqMzIERd6wKaF8CJIuIYCyIWq7qwOhoTjj4S437l7uRKsDVBqtolQVaMSQ+myKkukWS7SrW5QF8oVixEWBQfWCWVcMtmtZHncy4Wg4E+438nyJrrOC7lS0uXLWOefV5DRURSKVc7zUZXmFiiIIwk1ee6Y6EKgpFFdFI5XNXioeztS48XCLI1zV5K54rKqiv6KEWHSnX6gvNuX4jqus945G4q5gqpidcWOxaUJJrsdFQt1MzKmROv3XfC8qct3IdbKiqJdVFflhkLmWAdMUCzc5seqA8CsDZ7Al5bUn417UyS2GQP/IliyOTCqcSIsxEPYZTqRj4YwzkQRDlDCiaiZjp+cH34nF3GS6MC4FTQUJoYiTyDgpaVFUtYmpWVwL7J++qzoQIqqhm9zQbaPAUNSyeDiTcrsmElW3qWkT2wiGiMotYpm2xYMlrwUKEiSnF2SluqsDmko4tS29X0NK+COVc4sZFi2UCkdkEEu1DWr2N1/4rhC3qWprNrNKbDw3MLpeRJ7OdMec6oD0v5Wnyr2FTInE3GQo1R5zKhNe4nIn5U2JuulkLNxd6SZibsKZ4nU4qeaY11nZ4abdppgzRf66MTfTXSjK+eVKOsVNe7FwxvUSleH2jDcl7naFmmJOIhoS016ZEHYdmyJbEHLFQCfz5OlZ559VriLU7MYyTipdKRoTTgmqtBdzo6HSbvhl/e1odmOxylM1rjuGLjMD6kq7nM6kvMtk1sm9+16ukpJ8XqiPhJOVKa89ES0uvNRzE5VxN+Ok8qUyE3PjbqZSz5dFw+nWcCoV7i5RIkq95ua0k6ksKOpvpz8aKScRdVJuosUfUeksBhamW8PJQYUZpyszsMxJhJtiTqgpHLmsRfakMhyJtMfbxQorOIeqZDjTOmiJRLxEwolkvFQo0p7qCGfaU051gAwb17BxHZBx5e1E7KIKNVTLCFLCmEpsZikRJURVwk3bFO6SUCXEVGoxy5ZZnSshTWWGbZmmyHOuhAyVa8wwbS1IVEYFBaUqIzY3dS2oq5ZmWUqIEtXQDGoYWjD3qhCV2YQxM8hU3da4yBu2Ro0gZaqmM00hKjV1YrIgtVVTNw0lpjBL1QizNF0LEtFU0SSD2cGQJWQKFkI0LRiiIs9NIYIZwVBeAFE1zdRYULSZmbYS0lWLMm5RsaGplFlGf0vNYP61aESEQsv0x0S3DCoLbEsOikktassCzpXLS7YAsYp13TT61/WA3XJ4yQ4v2QNZsqV4wiqFHzaxVIOadilW0bkAaprN94NrymOgwSgrNATMCh0AzvpAkJfDeKZpBw4GRHJN3892OQSzZhLdNKwDRqA215mukSIQV4hVvKgj4H26OpD2n8DB7tlFXsIuddC6ahKLc9MSTtpQiW4yJaKISNg2TD0ovaahUJVTzoSvVBmhmkJVmxOba0GqmrrwrZRrOqFBohpEE46QGrbGjSBViWlYwpFSqptUD1LVEB6PqJpumswKEtWkGpcukBiaLiTYOhceXTVtU2eyQDMNyaLZnJvSBUqnaTHCuCbypmYx4TWJzgxTek1ObSZ4bMsydFFgGNQWTJpBLGFaVLV0ygUJ1zRTiGWqaVjCpxvUokS6WpsaXBGKuKXbgodRYilMtYjJbElhGtwq8saHnqO1TIc2O8OOdhh4DxvXPyXw1lTN8rGs2GGEjxZu0DZN2xLOlWi68Jy2QanFgkSlGpOgmxlcI0yAboMJSCoALKXcpgJ0M25oSshWDZ0SamhBWzU0W0JuxriE3MQgEh5zkxkSchPK5T5BhQIBuTVGNAG5BYRnOqNFkJtzCbk1w5Q+nBCqS8ytSxhPBWg3JeqWMojAxkSzBexmFtcE7GaW2G+CIVullFPZVE3s5sFQrqn9wyExt+2PCbeZ3CwoE0GFGBVNAvzcsJRD3RbtX9QpJ5I5dBdrrrJksRJVY9wgTDeHV+0BYG9hQLpu9WPA/DWSCBBN0+jHboUbJdXQqGYWnf11VQeoroo1QvsL5e2GJqJboxSSE9VkOjM1ZvebccRNRWKHcOzo32QN7zoHb7++5ei6VRo6MqpSy7A0vSRypETeexZHjtUBXTUNzTJ0Vh4qDUOgYWM8YAjELJVYOrG0ktA25Me2Vj60DfmxrWHlY9uQH9xadi64DQ2MbkO58FbPh7cDotuBwa0f22pGPrb1Q1tq5EPbXGSbC2z9uNYuhLW5qLYQ1A6MaXMhbSGi9QNauxDPhvyAlhbi2ZAf0JqFeDYkA1qtTDjbD3M4Pegzh4M6vyh/YiPPRIitBw720GWIvUw6GK5RUys6gyrvi4TfonJmdG6WdXL8UL5vG94jP1TYXxwh+PDLYLbNOLEHQDVT5cWFOVBnEJMbgzAgU23bsljRWWMONg6u6AeZRXIOSeuNNDcNW+9HOLQajm/z8a2tU2oNx7cHdiplq9Q2qakHKdG4SrmuKxGFBAVokUjLtLlhCyDFTM4kVKG2JaEYNQ1bngZRbltBIl81rsvTGZMQXRQwolk+kDK4Js+OdKJx/y5Zl3lucUv3oRbzrwMo54W8vFjSueGLt01LIwKlUc7MHLFBbHlvLe80COeafyXrN57qzL/XNnK9YcS2JIPBqURitm2xnHpNIk3TNDm3gvJ2g5eUiB4LOOfDNCpgpG4YojMhplJbp4qmMoNavJCnqmUbtmhxoUpAKKYVsjnCsgDP+jgBXjo9hNcYiuUj3Ghx+wNszFI1w7CljYkB9S+OxDhahijQLd3/4kCMTj7vjyPVhRX0D6QMDQpDnqMl/jxJ2F40O4SYJbMj8uVnRydG8ewIwkP5Nimi8Yg1fG1/sBvzgM89chGNoRrEMEsjGkO1dV3jrPyVf9Hd/qFne0xjhA6HNAe5rftfexBOqKVpJUfLVNV0zdKt4YPlvIVRi2qUDlvYhz9Ytks/iaZM1anOCN3/wTJVbVMjZvHXPIPOhvpp9n82xDSVUkIZLd/OQzm6Hjbzjx5dl8HJkchHAMm2VQqSDZUQw9As+dmXpTIr/20utYiuye+jCNcM+VEVM21Lng5bFqP+Z1Y6tZgsKfOvgwGWLG1CDn+/BTgdTsKL5ie08LVmiREQVbMtjXBL/0SNoTDxH3jM8a/apwGf+mncYLoh59xUbWqw3Jwb3JAXIkTz41zdtIgeJKqpERmTahrnVOQNppUzLvtjiR0jkX//OWCmGFRD0/x1Ry2mKxElt+wKqy636AprLrfkBq24whQYhH6yU/Ax+yOj6DvX/F2dxqjl39WZqmlp/rAY3DBzhunbpW+VTPGN0rdJ9u/lgqoqWmpGVlWkO1pqRp7YmonHKkRn/J0jFPNa3IQqSvH+qrGh0MizvWR3ym1pzSiMUEtpaHWU8z1lanum1UulVWVqLKbI6rSSctJOqsOJqiMb047iNSuZVjet+P8rVCJe1FHctNIikEfCiSpN3UpYOWv2OSE5piNjbsRJpB0l0xrOKJFwQmlylGbRIsVNKJlWR5k+7exza2efq8ajSrMbc9SR/r/PRUtFb/zfYwd051+2I/8bAAD//8w/BkWyWgAA")
	rx := base64.NewDecoder(base64.StdEncoding, r)
	rz, _ := gzip.NewReader(rx)
	gd := gob.NewDecoder(rz)
	if err := gd.Decode(&m); err != nil {
		panic(err)
	}
	return
}()

// mimeTypes is a mapping from file extensions to MIME types.
var mimeTypes = map[string]string{"css": "text/css; charset=utf-8", "html": "text/html; charset=utf-8", "ico": "image/x-icon", "js": "application/javascript", "svg": "image/svg+xml", "woff": "font/woff"}

// mimeFromPath returns the MIME type based on the file extension in the path.
func mimeFromPath(p string) string {
	if i := strings.LastIndexByte(p, '.'); i >= 0 {
		return mimeTypes[p[i+1:]]
	}
	return ""
}
